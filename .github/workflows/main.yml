name: CI/CD Pipeline with Multi-Architecture Build & Trivy Scan

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write
  id-token: write

jobs:

  run-unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run unit tests with Pytest
        run: pytest --junitxml=pytest-results.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: pytest-results.xml

  build-matrix:
    name: Build & Push Multi-Arch Images
    runs-on: ubuntu-latest
    needs: run-unit-tests
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::399359779313:role/secrer_role
          aws-region: us-east-1

      - name: Retrieve DockerHub credentials
        run: |
          sudo apt-get install jq -y
          SECRET_JSON=$(aws secretsmanager get-secret-value \
            --secret-id new_secret2323 \
            --query SecretString --output text)
          echo "DOCKERHUB_USERNAME=$(echo $SECRET_JSON | jq -r .DOCKERHUB_USERNAME)" >> $GITHUB_ENV
          echo "DOCKERHUB_TOKEN=$(echo $SECRET_JSON | jq -r .DOCKERHUB_TOKEN)" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/python-flask-app:${{ github.sha }}-${{ matrix.arch }}

  trivy-scan:
    name: Trivy Vulnerability Scan
    needs: build-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::399359779313:role/secrer_role
          aws-region: us-east-1

      - name: Retrieve DockerHub credentials
        run: |
          sudo apt-get install jq -y
          SECRET_JSON=$(aws secretsmanager get-secret-value \
            --secret-id new_secret2323 \
            --query SecretString --output text)
          echo "DOCKERHUB_USERNAME=$(echo $SECRET_JSON | jq -r .DOCKERHUB_USERNAME)" >> $GITHUB_ENV
          echo "DOCKERHUB_TOKEN=$(echo $SECRET_JSON | jq -r .DOCKERHUB_TOKEN)" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Pull image for scanning
        run: |
          docker pull --platform linux/${{ matrix.arch }} \
            ${{ env.DOCKERHUB_USERNAME }}/python-flask-app:${{ github.sha }}-${{ matrix.arch }}

      - name: Install Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy

      - name: Run Trivy scan
        continue-on-error: true
        run: |
          mkdir -p trivy-report
          trivy image \
            --format table \
            --exit-code 0 \
            --ignore-unfixed \
            --pkg-types os,library \
            --severity CRITICAL,HIGH \
            --output trivy-report/report-${{ matrix.arch }}.txt \
            ${{ env.DOCKERHUB_USERNAME }}/python-flask-app:${{ github.sha }}-${{ matrix.arch }}

      - name: Upload Trivy report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-${{ matrix.arch }}
          path: trivy-report/report-${{ matrix.arch }}.txt
